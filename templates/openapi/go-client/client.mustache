{{>partial_header}}
package {{packageName}}

import (
	"github.com/{{gitUserId}}/{{gitRepoId}}/internal"
	"github.com/{{gitUserId}}/{{gitRepoId}}/option"
)

const serviceBasePath = "{{basePathWithoutHost}}"

// APIClient manages communication with the {{appName}} {{version}}
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
{{#apiInfo}}
{{#apis}}
{{#operations}}
	{{classname}} {{#generateInterfaces}}{{classname}}{{/generateInterfaces}}{{^generateInterfaces}}*{{classname}}Service{{/generateInterfaces}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithCSPUrl(string) sets the URL for BloxOne Cloud Services Portal.
// - WithAPIKey(string) sets the APIKey for accessing the BloxOne API.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultTags(map[string]string) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

{{#apiInfo}}
	// API Services
{{#apis}}
{{#operations}}
	c.{{classname}} = (*{{classname}}Service)(&c.Common)
{{/operations}}
{{/apis}}
{{/apiInfo}}

	return c
}
